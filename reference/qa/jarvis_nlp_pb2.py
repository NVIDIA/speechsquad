# Copyright (c) 2020, NVIDIA CORPORATION.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: riva_nlp.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='riva_nlp.proto',
  package='nvidia.riva.nlp',
  syntax='proto3',
  serialized_options=_b('\370\001\001'),
  serialized_pb=_b('\n\x10riva_nlp.proto\x12\x11nvidia.riva.nlp\"D\n\x13NaturalQueryRequest\x12\r\n\x05query\x18\x01 \x01(\t\x12\r\n\x05top_n\x18\x02 \x01(\r\x12\x0f\n\x07\x63ontext\x18\x03 \x01(\t\"3\n\x12NaturalQueryResult\x12\x0e\n\x06\x61nswer\x18\x01 \x01(\t\x12\r\n\x05score\x18\x02 \x01(\x02\"N\n\x14NaturalQueryResponse\x12\x36\n\x07results\x18\x01 \x03(\x0b\x32%.nvidia.riva.nlp.NaturalQueryResult2n\n\tRivaNLP\x12\x61\n\x0cNaturalQuery\x12&.nvidia.riva.nlp.NaturalQueryRequest\x1a\'.nvidia.riva.nlp.NaturalQueryResponse\"\x00\x42\x03\xf8\x01\x01\x62\x06proto3')
)




_NATURALQUERYREQUEST = _descriptor.Descriptor(
  name='NaturalQueryRequest',
  full_name='nvidia.riva.nlp.NaturalQueryRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='query', full_name='nvidia.riva.nlp.NaturalQueryRequest.query', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='top_n', full_name='nvidia.riva.nlp.NaturalQueryRequest.top_n', index=1,
      number=2, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='context', full_name='nvidia.riva.nlp.NaturalQueryRequest.context', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=39,
  serialized_end=107,
)


_NATURALQUERYRESULT = _descriptor.Descriptor(
  name='NaturalQueryResult',
  full_name='nvidia.riva.nlp.NaturalQueryResult',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='answer', full_name='nvidia.riva.nlp.NaturalQueryResult.answer', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='score', full_name='nvidia.riva.nlp.NaturalQueryResult.score', index=1,
      number=2, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=float(0),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=109,
  serialized_end=160,
)


_NATURALQUERYRESPONSE = _descriptor.Descriptor(
  name='NaturalQueryResponse',
  full_name='nvidia.riva.nlp.NaturalQueryResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='results', full_name='nvidia.riva.nlp.NaturalQueryResponse.results', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=162,
  serialized_end=240,
)

_NATURALQUERYRESPONSE.fields_by_name['results'].message_type = _NATURALQUERYRESULT
DESCRIPTOR.message_types_by_name['NaturalQueryRequest'] = _NATURALQUERYREQUEST
DESCRIPTOR.message_types_by_name['NaturalQueryResult'] = _NATURALQUERYRESULT
DESCRIPTOR.message_types_by_name['NaturalQueryResponse'] = _NATURALQUERYRESPONSE
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

NaturalQueryRequest = _reflection.GeneratedProtocolMessageType('NaturalQueryRequest', (_message.Message,), dict(
  DESCRIPTOR = _NATURALQUERYREQUEST,
  __module__ = 'riva_nlp_pb2'
  # @@protoc_insertion_point(class_scope:nvidia.riva.nlp.NaturalQueryRequest)
  ))
_sym_db.RegisterMessage(NaturalQueryRequest)

NaturalQueryResult = _reflection.GeneratedProtocolMessageType('NaturalQueryResult', (_message.Message,), dict(
  DESCRIPTOR = _NATURALQUERYRESULT,
  __module__ = 'riva_nlp_pb2'
  # @@protoc_insertion_point(class_scope:nvidia.riva.nlp.NaturalQueryResult)
  ))
_sym_db.RegisterMessage(NaturalQueryResult)

NaturalQueryResponse = _reflection.GeneratedProtocolMessageType('NaturalQueryResponse', (_message.Message,), dict(
  DESCRIPTOR = _NATURALQUERYRESPONSE,
  __module__ = 'riva_nlp_pb2'
  # @@protoc_insertion_point(class_scope:nvidia.riva.nlp.NaturalQueryResponse)
  ))
_sym_db.RegisterMessage(NaturalQueryResponse)


DESCRIPTOR._options = None

_RIVANLP = _descriptor.ServiceDescriptor(
  name='RivaNLP',
  full_name='nvidia.riva.nlp.RivaNLP',
  file=DESCRIPTOR,
  index=0,
  serialized_options=None,
  serialized_start=242,
  serialized_end=352,
  methods=[
  _descriptor.MethodDescriptor(
    name='NaturalQuery',
    full_name='nvidia.riva.nlp.RivaNLP.NaturalQuery',
    index=0,
    containing_service=None,
    input_type=_NATURALQUERYREQUEST,
    output_type=_NATURALQUERYRESPONSE,
    serialized_options=None,
  ),
])
_sym_db.RegisterServiceDescriptor(_RIVANLP)

DESCRIPTOR.services_by_name['RivaNLP'] = _RIVANLP

# @@protoc_insertion_point(module_scope)
